#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <sys/resource.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <unistd.h>
#include <agv_diff_bringup/agv_ethercat.h>
#include <pthread.h>
#include <rtdm/rtdm.h>
#include <native/task.h>
#include <native/sem.h>
#include <native/mutex.h>
#include <native/timer.h>
#include <rtdk.h>

#define CHECK_BIT(var, pos) ((var) & (1 << (pos)))
int i, j,ret,status[slave_num]={0, 0, 0, 0},flag=0;
RT_TASK my_task;
int TASK_PERIOD_NS = 5000000,run=1;
uint64_t dc_start_time_ns,dc_time_ns;
int eth_cmd_vel_[4]={0, 0, 0 ,0};
int r_time,w_time,print_flag=0;
int finish_flag_[4] = {0, 0, 0, 0};
int finish_flag_C[2] = {0, 0};
int restart_finish = 0, read_home_pos_flag = 1;
int wheel_A_pos = 0, wheel_B_pos = 0, count = 0;

void signal_handler(int sig)
{
    run = 0;
}

int *igh_update(int *ros_cmd_vel_)
{
    
	for(j=0;j<slave_num;j++)
	{
		eth_cmd_vel_[j] = ros_cmd_vel_[j];  
	}
	return eth_curr_vel_;
}

void my_task_proc(void *arg)
{
	rt_task_set_periodic(NULL, TM_NOW, TASK_PERIOD_NS);
	while (run) 
	{
		rt_task_wait_period(NULL);
//		receive process data
        r_time= rt_timer_read();
		ecrt_master_receive(master);
		ecrt_domain_process(domainOutput);
		ecrt_domain_process(domainInput);
		r_time= rt_timer_read() - r_time;
		check_domain_state();

//		periodically check the states and show the current pose
		if(counter % 1000 == 0)
  		{	
			check_master_state();
		}

		for(i=0;i<slave_num;i++)
		{
			status[i] = EC_READ_U16(domainInput_pd + off_status_word[i]);
			state_[i] = EC_READ_S32(domainInput_pd + off_digital_input[i]);
			if((status[i]&0x004f)==0x0040)
			{
				EC_WRITE_U16(domainOutput_pd+off_control_word[i], 0x0006 );
			}
			else if((status[i]&0x006f)==0x0021)
			{
				EC_WRITE_U16(domainOutput_pd+off_control_word[i], 0x0007 );
			}
			else if( (status[i]&0x006f) == 0x0023)
			{
				EC_WRITE_U16(domainOutput_pd+off_control_word[i], 0x000f );
			}
			else if(( (status[0]&0x006f) == 0x0027))			 
			{
#if 0
				if(restart_finish == 0 && loop_flag == 0)
				{
//					限位开关
					switch_state_[0] = EC_READ_U32(domainInput_pd+off_digital_input[1]);
					switch_state_[1] = EC_READ_U32(domainInput_pd+off_digital_input[3]);
					restart();
					if(switch_state_[0] == 1 && switch_state_[1] == 1)
					{	restart_finish = 1; printf("HOME_DONE!!\n");}
				}
#endif
//				else{
				loop_flag = 1;
				eth_curr_pos_[i] = EC_READ_S32(domainInput_pd + off_actual_position[i]);
				eth_curr_vel_[i] = EC_READ_S32(domainInput_pd + off_actual_velocity[i]);			
				EC_WRITE_U32(domainOutput_pd+off_target_velocity[i], eth_cmd_vel_[i]);
//				EC_WRITE_U32(domainOutput_pd+off_target_velocity[0], 500);
				switch_state_[0] = EC_READ_U32(domainInput_pd+off_digital_input[1]);
				switch_state_[1] = EC_READ_U32(domainInput_pd+off_digital_input[3]);
//				}

#if 0
				count ++;
				if(count%1000 == 0)
				{
					printf("%d\n", eth_curr_pos_[0]);					
				}
			
				if(switch_state_[1] == 1)
				{
					printf("sw2%d\n", eth_curr_pos_[2]);
				}
				if(switch_state_[0] == 1)
				{
					printf("sw1%d\n", eth_curr_pos_[0]);
				}

#endif
			}

			else if((status[i]&0x0008)==0x0008)
			{
				EC_WRITE_U16(domainOutput_pd+off_control_word[i], 0x0080); 					 
			}
		}
// 		send process data
		counter++;
		w_time = rt_timer_read();
		ecrt_domain_queue(domainOutput);
		ecrt_domain_queue(domainInput);
		dc_time_ns = rt_timer_read();
		ecrt_master_application_time(master, dc_time_ns);
		ecrt_master_sync_reference_clock(master);
		ecrt_master_sync_slave_clocks(master);
		ecrt_master_send(master);
		w_time = rt_timer_read() - w_time;
	}

}

bool igh_configure()
{
    rt_print_auto_init(1);

	mlockall(MCL_CURRENT | MCL_FUTURE);
	if (mlockall(MCL_CURRENT | MCL_FUTURE) == -1) 
	{
        perror("mlockall failed");
        return false;
    }
	ret = rt_task_create(&my_task, "my_task", 0, 80, T_FPU);
	if (ret < 0) 
	{
		fprintf(stderr, "Failed to create task: %s\n", strerror(-ret));
		return false;
	}

//	Requests an EtherCAT master for realtime operation.
//	Index of the master to request.
  	master = ecrt_request_master(0); 
  	if (!master)
   		return false;

//	Creates a new process data domain
  	domainOutput = ecrt_master_create_domain(master);
  	if (!domainOutput)
    	return false;
  	domainInput= ecrt_master_create_domain(master);
  	if (!domainInput)
    	return false;
//	1
  	if (!(sc1 = ecrt_master_slave_config(master, LiWei_Pulse_Pos, LiWei_Pulse))) 
	{
		fprintf(stderr, "Failed to get slave configuration.\n");
		return -1;
	}
	if (ecrt_slave_config_pdos(sc1, 5, slave_0_syncs)) 
	{
		fprintf(stderr, "Failed to configure PDOs.\n");
		return -1;
	}

	if (ecrt_domain_reg_pdo_entry_list(domainInput, domainInput_regs)) 
	{
		fprintf(stderr, "PDO entry registration failed1!\n");
		return -1;
	}
	if (ecrt_domain_reg_pdo_entry_list(domainOutput, domainOutput_regs)) 
	{
		fprintf(stderr, "PDO entry registration failed2!\n");
		return -1;
	}
	ecrt_slave_config_sdo8( sc1, 0x6060, 0, 8 );
	ecrt_slave_config_sdo16( sc1, 0x2002, 0, 1000 );
	ecrt_slave_config_sdo16( sc1, 0x2003, 0, 200 );
	ecrt_slave_config_dc(sc1, 0x0300, TASK_PERIOD_NS, 4400000, 0, 0); 
	dc_start_time_ns = rt_timer_read();
 	ecrt_master_application_time(master, dc_start_time_ns);
  	printf("Activating master...\n");
  	if (ecrt_master_activate(master))
    	return false;

  	if (!(domainInput_pd = ecrt_domain_data(domainInput))) 
  	{
    	fprintf(stderr, "Failed to get domain data pointer.\n");
    	return false;
  	}
  	if (!(domainOutput_pd = ecrt_domain_data(domainOutput))) 
  	{
    	fprintf(stderr, "Failed to get domain data pointer.\n");
    	return false;
	}
	printf("Starting my_task...\n");
	ret = rt_task_start(&my_task, &my_task_proc, NULL);
	if (ret < 0) 
	{
		fprintf(stderr, "Failed to start task: %s\n", strerror(-ret));
		return false;
	}
  	return true;
}

int *igh_get_curr_vel()
{
	return eth_curr_vel_;
}

int *igh_get_curr_switch_state()
{
	return switch_state_;
}

int *igh_get_curr_pos()
{
	return eth_curr_pos_;
}
int *igh_get_home_pos()
{
	return eth_curr_pos_;
}
int restart()
{	
	int i, j;
	if(read_home_pos_flag == 1)
	{	
		for(i = 0; i < 4; i++)
		{
			eth_home_pos_[i] = EC_READ_S32(domainInput_pd + off_actual_position[i]);
		}
		read_home_pos_flag = 0;
	}
	for(i = 0; i < 4; i++)
	{
		eth_curr_pos_[i] = EC_READ_S32(domainInput_pd + off_actual_position[i]);
	}
#if 1
	for(j = 0; j < 2; j++)
	{
		//joint 1 & 3
		if(switch_state_[j] == 0 && finish_flag_[j] == 0 && finish_flag_C[j] == 0)
		{
			if((eth_curr_pos_[2*j+1] - eth_home_pos_[2*j+1]) < 20000)
				EC_WRITE_U32(domainOutput_pd+off_target_velocity[2*j+1], 500);
			else
			{
				EC_WRITE_U32(domainOutput_pd+off_target_velocity[2*j+1], -500);
				finish_flag_C[j] = 1;
			}
		}
		else if(switch_state_[j] == 1 && finish_flag_[j] == 0)
		{
			EC_WRITE_U32(domainOutput_pd+off_target_velocity[2*j+1], 500);
			finish_flag_[j] = 1;
		}
		else if (switch_state_[j] == 0 && finish_flag_[j] == 1)
		{
			EC_WRITE_U32(domainOutput_pd+off_target_velocity[2*j+1], -10);
		}
		else if (switch_state_[j] == 1 && finish_flag_[j] == 1)
		{
			EC_WRITE_U32(domainOutput_pd+off_target_velocity[2*j+1], 0);
			finish_flag_[j+2] = 1;
		}
	}
#endif
	if(finish_flag_[2] == 1 && finish_flag_[3] == 1)
	{
		restart_finish = 1;
		return 1;
	}
	else
		return 0;
}

void igh_stop()
{
//	ecrt_master_deactivate(master);
	int i,j;
//	receive process data
	ecrt_master_receive(master);
	ecrt_domain_process(domainOutput);
	ecrt_domain_process(domainInput);
//	send process data
	for(j = 0; j<10; j++)
	{
		for(i = 0;i < 4;i++)
		{
			EC_WRITE_U32(domainOutput_pd+off_target_velocity[i], 0);
		}
	}
	ecrt_domain_queue(domainOutput);
	ecrt_domain_queue(domainInput);
	ecrt_master_send(master);
}

void igh_cleanup() 
{
	printf("Deleting realtime task...\n");
	rt_task_delete(&my_task);
	
	printf("End of Program\n");
	ecrt_release_master(master);
}


void check_domain_state()
{
    ec_domain_state_t ds1;
    ec_domain_state_t ds2;
    ecrt_domain_state(domainInput, &ds1);
    ecrt_domain_state(domainOutput, &ds2);
    if (ds1.working_counter != domainInput_state.working_counter)
	{
		rt_printf("domainInput: WC %u.\n", ds1.working_counter);
	}
    if (ds1.wc_state != domainInput_state.wc_state)
	{
		rt_printf("domainInput: State %u.\n", ds1.wc_state);
	}
    domainInput_state = ds1;
	if (ds2.working_counter != domainOutput_state.working_counter)
	{
		rt_printf("domainOutput: WC %u.\n", ds2.working_counter);
	}
    if (ds2.wc_state != domainOutput_state.wc_state)
	{
		rt_printf("domainOutput: State %u.\n", ds2.wc_state);
	}
    domainOutput_state = ds2;
}

void check_master_state()
{
	ec_master_state_t ms;

	ecrt_master_state(master, &ms);

	if (ms.slaves_responding != master_state.slaves_responding)
		rt_printf("%u slave(s).\n", ms.slaves_responding);
	if (ms.al_states != master_state.al_states)
		rt_printf("AL states: 0x%02X.\n", ms.al_states);
	if (ms.link_up != master_state.link_up)
		rt_printf("Link is %s.\n", ms.link_up ? "up" : "down");
	master_state = ms;
}

